version: "3.8"  

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
      mysql:
            image: mysql:8.0 # Usa la imagen oficial de MySQL
            environment:
                  MYSQL_ROOT_PASSWORD: yourpassword # Contraseña para el usuario root
                  MYSQL_DATABASE: express-user # Nombre de la base de datos a crear
            ports:
                  - "3315:3306" # Expon el puerto 3306 para MySQL
            volumes:
                  - mysql-data:/var/lib/mysql # Persiste los datos de la base de datos
            networks:
                  - app-network
            healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                  interval: 10s
                  timeout: 5s
                  retries: 5

      server:
            build:
                  context: .
            image: signados/jsexpresslogin:${TAG} 
            environment:
                  NODE_ENV: production
                  DB_HOST: mysql # Se conecta al servicio mysql
                  DB_USER: root # Usuario de la base de datos
                  DB_PASSWORD: yourpassword # Contraseña de la base de datos
                  DB_NAME: express-user
                  DB_DEV_NAME: express-user
                  DB_PORT: 3306 # Puerto de MySQL
                  JWT_SECRET: secret
            ports:
                  - 3015:3001
            depends_on:
                  mysql:
                        condition: service_healthy
            networks:
                  - app-network

networks:
      app-network:
            driver: bridge

volumes:
      mysql-data:
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

